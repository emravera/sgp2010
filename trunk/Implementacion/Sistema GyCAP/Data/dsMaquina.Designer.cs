//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GyCAP.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsMaquina")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsMaquina : global::System.Data.DataSet {
        
        private MAQUINASDataTable tableMAQUINAS;
        
        private ESTADO_MAQUINASDataTable tableESTADO_MAQUINAS;
        
        private MODELOS_MAQUINASDataTable tableMODELOS_MAQUINAS;
        
        private FABRICANTE_MAQUINASDataTable tableFABRICANTE_MAQUINAS;
        
        private global::System.Data.DataRelation relationmaquina_estadoMaquina_fk;
        
        private global::System.Data.DataRelation relationmaquina_modeloMaquina_fk;
        
        private global::System.Data.DataRelation relationmaquina_fabricanteMaquina_fk;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsMaquina() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsMaquina(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MAQUINAS"] != null)) {
                    base.Tables.Add(new MAQUINASDataTable(ds.Tables["MAQUINAS"]));
                }
                if ((ds.Tables["ESTADO_MAQUINAS"] != null)) {
                    base.Tables.Add(new ESTADO_MAQUINASDataTable(ds.Tables["ESTADO_MAQUINAS"]));
                }
                if ((ds.Tables["MODELOS_MAQUINAS"] != null)) {
                    base.Tables.Add(new MODELOS_MAQUINASDataTable(ds.Tables["MODELOS_MAQUINAS"]));
                }
                if ((ds.Tables["FABRICANTE_MAQUINAS"] != null)) {
                    base.Tables.Add(new FABRICANTE_MAQUINASDataTable(ds.Tables["FABRICANTE_MAQUINAS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MAQUINASDataTable MAQUINAS {
            get {
                return this.tableMAQUINAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ESTADO_MAQUINASDataTable ESTADO_MAQUINAS {
            get {
                return this.tableESTADO_MAQUINAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MODELOS_MAQUINASDataTable MODELOS_MAQUINAS {
            get {
                return this.tableMODELOS_MAQUINAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FABRICANTE_MAQUINASDataTable FABRICANTE_MAQUINAS {
            get {
                return this.tableFABRICANTE_MAQUINAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsMaquina cln = ((dsMaquina)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MAQUINAS"] != null)) {
                    base.Tables.Add(new MAQUINASDataTable(ds.Tables["MAQUINAS"]));
                }
                if ((ds.Tables["ESTADO_MAQUINAS"] != null)) {
                    base.Tables.Add(new ESTADO_MAQUINASDataTable(ds.Tables["ESTADO_MAQUINAS"]));
                }
                if ((ds.Tables["MODELOS_MAQUINAS"] != null)) {
                    base.Tables.Add(new MODELOS_MAQUINASDataTable(ds.Tables["MODELOS_MAQUINAS"]));
                }
                if ((ds.Tables["FABRICANTE_MAQUINAS"] != null)) {
                    base.Tables.Add(new FABRICANTE_MAQUINASDataTable(ds.Tables["FABRICANTE_MAQUINAS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMAQUINAS = ((MAQUINASDataTable)(base.Tables["MAQUINAS"]));
            if ((initTable == true)) {
                if ((this.tableMAQUINAS != null)) {
                    this.tableMAQUINAS.InitVars();
                }
            }
            this.tableESTADO_MAQUINAS = ((ESTADO_MAQUINASDataTable)(base.Tables["ESTADO_MAQUINAS"]));
            if ((initTable == true)) {
                if ((this.tableESTADO_MAQUINAS != null)) {
                    this.tableESTADO_MAQUINAS.InitVars();
                }
            }
            this.tableMODELOS_MAQUINAS = ((MODELOS_MAQUINASDataTable)(base.Tables["MODELOS_MAQUINAS"]));
            if ((initTable == true)) {
                if ((this.tableMODELOS_MAQUINAS != null)) {
                    this.tableMODELOS_MAQUINAS.InitVars();
                }
            }
            this.tableFABRICANTE_MAQUINAS = ((FABRICANTE_MAQUINASDataTable)(base.Tables["FABRICANTE_MAQUINAS"]));
            if ((initTable == true)) {
                if ((this.tableFABRICANTE_MAQUINAS != null)) {
                    this.tableFABRICANTE_MAQUINAS.InitVars();
                }
            }
            this.relationmaquina_estadoMaquina_fk = this.Relations["maquina_estadoMaquina_fk"];
            this.relationmaquina_modeloMaquina_fk = this.Relations["maquina_modeloMaquina_fk"];
            this.relationmaquina_fabricanteMaquina_fk = this.Relations["maquina_fabricanteMaquina_fk"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsMaquina";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsMaquina.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMAQUINAS = new MAQUINASDataTable();
            base.Tables.Add(this.tableMAQUINAS);
            this.tableESTADO_MAQUINAS = new ESTADO_MAQUINASDataTable();
            base.Tables.Add(this.tableESTADO_MAQUINAS);
            this.tableMODELOS_MAQUINAS = new MODELOS_MAQUINASDataTable();
            base.Tables.Add(this.tableMODELOS_MAQUINAS);
            this.tableFABRICANTE_MAQUINAS = new FABRICANTE_MAQUINASDataTable();
            base.Tables.Add(this.tableFABRICANTE_MAQUINAS);
            this.relationmaquina_estadoMaquina_fk = new global::System.Data.DataRelation("maquina_estadoMaquina_fk", new global::System.Data.DataColumn[] {
                        this.tableESTADO_MAQUINAS.EMAQ_CODIGOColumn}, new global::System.Data.DataColumn[] {
                        this.tableMAQUINAS.EMAQ_CODIGOColumn}, false);
            this.Relations.Add(this.relationmaquina_estadoMaquina_fk);
            this.relationmaquina_modeloMaquina_fk = new global::System.Data.DataRelation("maquina_modeloMaquina_fk", new global::System.Data.DataColumn[] {
                        this.tableMODELOS_MAQUINAS.MODM_CODIGOColumn}, new global::System.Data.DataColumn[] {
                        this.tableMAQUINAS.MODM_CODIGOColumn}, false);
            this.Relations.Add(this.relationmaquina_modeloMaquina_fk);
            this.relationmaquina_fabricanteMaquina_fk = new global::System.Data.DataRelation("maquina_fabricanteMaquina_fk", new global::System.Data.DataColumn[] {
                        this.tableFABRICANTE_MAQUINAS.FAB_CODIGOColumn}, new global::System.Data.DataColumn[] {
                        this.tableMAQUINAS.FAB_CODIGOColumn}, false);
            this.Relations.Add(this.relationmaquina_fabricanteMaquina_fk);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMAQUINAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeESTADO_MAQUINAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMODELOS_MAQUINAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFABRICANTE_MAQUINAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsMaquina ds = new dsMaquina();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MAQUINASRowChangeEventHandler(object sender, MAQUINASRowChangeEvent e);
        
        public delegate void ESTADO_MAQUINASRowChangeEventHandler(object sender, ESTADO_MAQUINASRowChangeEvent e);
        
        public delegate void MODELOS_MAQUINASRowChangeEventHandler(object sender, MODELOS_MAQUINASRowChangeEvent e);
        
        public delegate void FABRICANTE_MAQUINASRowChangeEventHandler(object sender, FABRICANTE_MAQUINASRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MAQUINASDataTable : global::System.Data.TypedTableBase<MAQUINASRow> {
            
            private global::System.Data.DataColumn columnMAQ_CODIGO;
            
            private global::System.Data.DataColumn columnMODM_CODIGO;
            
            private global::System.Data.DataColumn columnEMAQ_CODIGO;
            
            private global::System.Data.DataColumn columnFAB_CODIGO;
            
            private global::System.Data.DataColumn columnMAQ_NOMBRE;
            
            private global::System.Data.DataColumn columnMAQ_NUMEROSERIE;
            
            private global::System.Data.DataColumn columnMAQ_FECHAALTA;
            
            private global::System.Data.DataColumn columnMAQ_MARCA;
            
            private global::System.Data.DataColumn columnMAQ_ES_CRITICA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASDataTable() {
                this.TableName = "MAQUINAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MAQUINASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MAQUINASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAQ_CODIGOColumn {
                get {
                    return this.columnMAQ_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODM_CODIGOColumn {
                get {
                    return this.columnMODM_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAQ_CODIGOColumn {
                get {
                    return this.columnEMAQ_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FAB_CODIGOColumn {
                get {
                    return this.columnFAB_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAQ_NOMBREColumn {
                get {
                    return this.columnMAQ_NOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAQ_NUMEROSERIEColumn {
                get {
                    return this.columnMAQ_NUMEROSERIE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAQ_FECHAALTAColumn {
                get {
                    return this.columnMAQ_FECHAALTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAQ_MARCAColumn {
                get {
                    return this.columnMAQ_MARCA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAQ_ES_CRITICAColumn {
                get {
                    return this.columnMAQ_ES_CRITICA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow this[int index] {
                get {
                    return ((MAQUINASRow)(this.Rows[index]));
                }
            }
            
            public event MAQUINASRowChangeEventHandler MAQUINASRowChanging;
            
            public event MAQUINASRowChangeEventHandler MAQUINASRowChanged;
            
            public event MAQUINASRowChangeEventHandler MAQUINASRowDeleting;
            
            public event MAQUINASRowChangeEventHandler MAQUINASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMAQUINASRow(MAQUINASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow AddMAQUINASRow(MODELOS_MAQUINASRow parentMODELOS_MAQUINASRowBymaquina_modeloMaquina_fk, ESTADO_MAQUINASRow parentESTADO_MAQUINASRowBymaquina_estadoMaquina_fk, FABRICANTE_MAQUINASRow parentFABRICANTE_MAQUINASRowBymaquina_fabricanteMaquina_fk, string MAQ_NOMBRE, string MAQ_NUMEROSERIE, System.DateTime MAQ_FECHAALTA, string MAQ_MARCA, string MAQ_ES_CRITICA) {
                MAQUINASRow rowMAQUINASRow = ((MAQUINASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        null,
                        MAQ_NOMBRE,
                        MAQ_NUMEROSERIE,
                        MAQ_FECHAALTA,
                        MAQ_MARCA,
                        MAQ_ES_CRITICA};
                if ((parentMODELOS_MAQUINASRowBymaquina_modeloMaquina_fk != null)) {
                    columnValuesArray[1] = parentMODELOS_MAQUINASRowBymaquina_modeloMaquina_fk[0];
                }
                if ((parentESTADO_MAQUINASRowBymaquina_estadoMaquina_fk != null)) {
                    columnValuesArray[2] = parentESTADO_MAQUINASRowBymaquina_estadoMaquina_fk[0];
                }
                if ((parentFABRICANTE_MAQUINASRowBymaquina_fabricanteMaquina_fk != null)) {
                    columnValuesArray[3] = parentFABRICANTE_MAQUINASRowBymaquina_fabricanteMaquina_fk[0];
                }
                rowMAQUINASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMAQUINASRow);
                return rowMAQUINASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow FindByMAQ_CODIGO(decimal MAQ_CODIGO) {
                return ((MAQUINASRow)(this.Rows.Find(new object[] {
                            MAQ_CODIGO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MAQUINASDataTable cln = ((MAQUINASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MAQUINASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAQ_CODIGO = base.Columns["MAQ_CODIGO"];
                this.columnMODM_CODIGO = base.Columns["MODM_CODIGO"];
                this.columnEMAQ_CODIGO = base.Columns["EMAQ_CODIGO"];
                this.columnFAB_CODIGO = base.Columns["FAB_CODIGO"];
                this.columnMAQ_NOMBRE = base.Columns["MAQ_NOMBRE"];
                this.columnMAQ_NUMEROSERIE = base.Columns["MAQ_NUMEROSERIE"];
                this.columnMAQ_FECHAALTA = base.Columns["MAQ_FECHAALTA"];
                this.columnMAQ_MARCA = base.Columns["MAQ_MARCA"];
                this.columnMAQ_ES_CRITICA = base.Columns["MAQ_ES_CRITICA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAQ_CODIGO = new global::System.Data.DataColumn("MAQ_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAQ_CODIGO);
                this.columnMODM_CODIGO = new global::System.Data.DataColumn("MODM_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODM_CODIGO);
                this.columnEMAQ_CODIGO = new global::System.Data.DataColumn("EMAQ_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAQ_CODIGO);
                this.columnFAB_CODIGO = new global::System.Data.DataColumn("FAB_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAB_CODIGO);
                this.columnMAQ_NOMBRE = new global::System.Data.DataColumn("MAQ_NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAQ_NOMBRE);
                this.columnMAQ_NUMEROSERIE = new global::System.Data.DataColumn("MAQ_NUMEROSERIE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAQ_NUMEROSERIE);
                this.columnMAQ_FECHAALTA = new global::System.Data.DataColumn("MAQ_FECHAALTA", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAQ_FECHAALTA);
                this.columnMAQ_MARCA = new global::System.Data.DataColumn("MAQ_MARCA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAQ_MARCA);
                this.columnMAQ_ES_CRITICA = new global::System.Data.DataColumn("MAQ_ES_CRITICA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAQ_ES_CRITICA);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAQ_CODIGO}, true));
                this.columnMAQ_CODIGO.AutoIncrement = true;
                this.columnMAQ_CODIGO.AutoIncrementSeed = -1;
                this.columnMAQ_CODIGO.AutoIncrementStep = -1;
                this.columnMAQ_CODIGO.AllowDBNull = false;
                this.columnMAQ_CODIGO.ReadOnly = true;
                this.columnMAQ_CODIGO.Unique = true;
                this.columnMODM_CODIGO.AllowDBNull = false;
                this.columnEMAQ_CODIGO.AllowDBNull = false;
                this.columnFAB_CODIGO.AllowDBNull = false;
                this.columnMAQ_NOMBRE.MaxLength = 80;
                this.columnMAQ_NUMEROSERIE.MaxLength = 20;
                this.columnMAQ_MARCA.MaxLength = 80;
                this.columnMAQ_ES_CRITICA.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow NewMAQUINASRow() {
                return ((MAQUINASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MAQUINASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MAQUINASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MAQUINASRowChanged != null)) {
                    this.MAQUINASRowChanged(this, new MAQUINASRowChangeEvent(((MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MAQUINASRowChanging != null)) {
                    this.MAQUINASRowChanging(this, new MAQUINASRowChangeEvent(((MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MAQUINASRowDeleted != null)) {
                    this.MAQUINASRowDeleted(this, new MAQUINASRowChangeEvent(((MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MAQUINASRowDeleting != null)) {
                    this.MAQUINASRowDeleting(this, new MAQUINASRowChangeEvent(((MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMAQUINASRow(MAQUINASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMaquina ds = new dsMaquina();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MAQUINASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ESTADO_MAQUINASDataTable : global::System.Data.TypedTableBase<ESTADO_MAQUINASRow> {
            
            private global::System.Data.DataColumn columnEMAQ_CODIGO;
            
            private global::System.Data.DataColumn columnEMAQ_NOMBRE;
            
            private global::System.Data.DataColumn columnEMAQ_DESCRIPCION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASDataTable() {
                this.TableName = "ESTADO_MAQUINAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ESTADO_MAQUINASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ESTADO_MAQUINASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAQ_CODIGOColumn {
                get {
                    return this.columnEMAQ_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAQ_NOMBREColumn {
                get {
                    return this.columnEMAQ_NOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAQ_DESCRIPCIONColumn {
                get {
                    return this.columnEMAQ_DESCRIPCION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRow this[int index] {
                get {
                    return ((ESTADO_MAQUINASRow)(this.Rows[index]));
                }
            }
            
            public event ESTADO_MAQUINASRowChangeEventHandler ESTADO_MAQUINASRowChanging;
            
            public event ESTADO_MAQUINASRowChangeEventHandler ESTADO_MAQUINASRowChanged;
            
            public event ESTADO_MAQUINASRowChangeEventHandler ESTADO_MAQUINASRowDeleting;
            
            public event ESTADO_MAQUINASRowChangeEventHandler ESTADO_MAQUINASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddESTADO_MAQUINASRow(ESTADO_MAQUINASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRow AddESTADO_MAQUINASRow(string EMAQ_NOMBRE, string EMAQ_DESCRIPCION) {
                ESTADO_MAQUINASRow rowESTADO_MAQUINASRow = ((ESTADO_MAQUINASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EMAQ_NOMBRE,
                        EMAQ_DESCRIPCION};
                rowESTADO_MAQUINASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowESTADO_MAQUINASRow);
                return rowESTADO_MAQUINASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRow FindByEMAQ_CODIGO(decimal EMAQ_CODIGO) {
                return ((ESTADO_MAQUINASRow)(this.Rows.Find(new object[] {
                            EMAQ_CODIGO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ESTADO_MAQUINASDataTable cln = ((ESTADO_MAQUINASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ESTADO_MAQUINASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMAQ_CODIGO = base.Columns["EMAQ_CODIGO"];
                this.columnEMAQ_NOMBRE = base.Columns["EMAQ_NOMBRE"];
                this.columnEMAQ_DESCRIPCION = base.Columns["EMAQ_DESCRIPCION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMAQ_CODIGO = new global::System.Data.DataColumn("EMAQ_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAQ_CODIGO);
                this.columnEMAQ_NOMBRE = new global::System.Data.DataColumn("EMAQ_NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAQ_NOMBRE);
                this.columnEMAQ_DESCRIPCION = new global::System.Data.DataColumn("EMAQ_DESCRIPCION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAQ_DESCRIPCION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEMAQ_CODIGO}, true));
                this.columnEMAQ_CODIGO.AutoIncrement = true;
                this.columnEMAQ_CODIGO.AutoIncrementSeed = -1;
                this.columnEMAQ_CODIGO.AutoIncrementStep = -1;
                this.columnEMAQ_CODIGO.AllowDBNull = false;
                this.columnEMAQ_CODIGO.ReadOnly = true;
                this.columnEMAQ_CODIGO.Unique = true;
                this.columnEMAQ_NOMBRE.MaxLength = 80;
                this.columnEMAQ_DESCRIPCION.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRow NewESTADO_MAQUINASRow() {
                return ((ESTADO_MAQUINASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ESTADO_MAQUINASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ESTADO_MAQUINASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ESTADO_MAQUINASRowChanged != null)) {
                    this.ESTADO_MAQUINASRowChanged(this, new ESTADO_MAQUINASRowChangeEvent(((ESTADO_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ESTADO_MAQUINASRowChanging != null)) {
                    this.ESTADO_MAQUINASRowChanging(this, new ESTADO_MAQUINASRowChangeEvent(((ESTADO_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ESTADO_MAQUINASRowDeleted != null)) {
                    this.ESTADO_MAQUINASRowDeleted(this, new ESTADO_MAQUINASRowChangeEvent(((ESTADO_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ESTADO_MAQUINASRowDeleting != null)) {
                    this.ESTADO_MAQUINASRowDeleting(this, new ESTADO_MAQUINASRowChangeEvent(((ESTADO_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveESTADO_MAQUINASRow(ESTADO_MAQUINASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMaquina ds = new dsMaquina();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ESTADO_MAQUINASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MODELOS_MAQUINASDataTable : global::System.Data.TypedTableBase<MODELOS_MAQUINASRow> {
            
            private global::System.Data.DataColumn columnMODM_CODIGO;
            
            private global::System.Data.DataColumn columnMODM_NOMBRE;
            
            private global::System.Data.DataColumn columnMODM_DESCRIPCION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASDataTable() {
                this.TableName = "MODELOS_MAQUINAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MODELOS_MAQUINASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MODELOS_MAQUINASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODM_CODIGOColumn {
                get {
                    return this.columnMODM_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODM_NOMBREColumn {
                get {
                    return this.columnMODM_NOMBRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODM_DESCRIPCIONColumn {
                get {
                    return this.columnMODM_DESCRIPCION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRow this[int index] {
                get {
                    return ((MODELOS_MAQUINASRow)(this.Rows[index]));
                }
            }
            
            public event MODELOS_MAQUINASRowChangeEventHandler MODELOS_MAQUINASRowChanging;
            
            public event MODELOS_MAQUINASRowChangeEventHandler MODELOS_MAQUINASRowChanged;
            
            public event MODELOS_MAQUINASRowChangeEventHandler MODELOS_MAQUINASRowDeleting;
            
            public event MODELOS_MAQUINASRowChangeEventHandler MODELOS_MAQUINASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMODELOS_MAQUINASRow(MODELOS_MAQUINASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRow AddMODELOS_MAQUINASRow(string MODM_NOMBRE, string MODM_DESCRIPCION) {
                MODELOS_MAQUINASRow rowMODELOS_MAQUINASRow = ((MODELOS_MAQUINASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MODM_NOMBRE,
                        MODM_DESCRIPCION};
                rowMODELOS_MAQUINASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMODELOS_MAQUINASRow);
                return rowMODELOS_MAQUINASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRow FindByMODM_CODIGO(decimal MODM_CODIGO) {
                return ((MODELOS_MAQUINASRow)(this.Rows.Find(new object[] {
                            MODM_CODIGO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MODELOS_MAQUINASDataTable cln = ((MODELOS_MAQUINASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MODELOS_MAQUINASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMODM_CODIGO = base.Columns["MODM_CODIGO"];
                this.columnMODM_NOMBRE = base.Columns["MODM_NOMBRE"];
                this.columnMODM_DESCRIPCION = base.Columns["MODM_DESCRIPCION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMODM_CODIGO = new global::System.Data.DataColumn("MODM_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODM_CODIGO);
                this.columnMODM_NOMBRE = new global::System.Data.DataColumn("MODM_NOMBRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODM_NOMBRE);
                this.columnMODM_DESCRIPCION = new global::System.Data.DataColumn("MODM_DESCRIPCION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODM_DESCRIPCION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMODM_CODIGO}, true));
                this.columnMODM_CODIGO.AutoIncrement = true;
                this.columnMODM_CODIGO.AutoIncrementSeed = -1;
                this.columnMODM_CODIGO.AutoIncrementStep = -1;
                this.columnMODM_CODIGO.AllowDBNull = false;
                this.columnMODM_CODIGO.ReadOnly = true;
                this.columnMODM_CODIGO.Unique = true;
                this.columnMODM_NOMBRE.MaxLength = 80;
                this.columnMODM_DESCRIPCION.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRow NewMODELOS_MAQUINASRow() {
                return ((MODELOS_MAQUINASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MODELOS_MAQUINASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MODELOS_MAQUINASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MODELOS_MAQUINASRowChanged != null)) {
                    this.MODELOS_MAQUINASRowChanged(this, new MODELOS_MAQUINASRowChangeEvent(((MODELOS_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MODELOS_MAQUINASRowChanging != null)) {
                    this.MODELOS_MAQUINASRowChanging(this, new MODELOS_MAQUINASRowChangeEvent(((MODELOS_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MODELOS_MAQUINASRowDeleted != null)) {
                    this.MODELOS_MAQUINASRowDeleted(this, new MODELOS_MAQUINASRowChangeEvent(((MODELOS_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MODELOS_MAQUINASRowDeleting != null)) {
                    this.MODELOS_MAQUINASRowDeleting(this, new MODELOS_MAQUINASRowChangeEvent(((MODELOS_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMODELOS_MAQUINASRow(MODELOS_MAQUINASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMaquina ds = new dsMaquina();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MODELOS_MAQUINASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FABRICANTE_MAQUINASDataTable : global::System.Data.TypedTableBase<FABRICANTE_MAQUINASRow> {
            
            private global::System.Data.DataColumn columnFAB_CODIGO;
            
            private global::System.Data.DataColumn columnFAB_RAZONSOCIAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASDataTable() {
                this.TableName = "FABRICANTE_MAQUINAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FABRICANTE_MAQUINASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FABRICANTE_MAQUINASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FAB_CODIGOColumn {
                get {
                    return this.columnFAB_CODIGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FAB_RAZONSOCIALColumn {
                get {
                    return this.columnFAB_RAZONSOCIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRow this[int index] {
                get {
                    return ((FABRICANTE_MAQUINASRow)(this.Rows[index]));
                }
            }
            
            public event FABRICANTE_MAQUINASRowChangeEventHandler FABRICANTE_MAQUINASRowChanging;
            
            public event FABRICANTE_MAQUINASRowChangeEventHandler FABRICANTE_MAQUINASRowChanged;
            
            public event FABRICANTE_MAQUINASRowChangeEventHandler FABRICANTE_MAQUINASRowDeleting;
            
            public event FABRICANTE_MAQUINASRowChangeEventHandler FABRICANTE_MAQUINASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFABRICANTE_MAQUINASRow(FABRICANTE_MAQUINASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRow AddFABRICANTE_MAQUINASRow(string FAB_RAZONSOCIAL) {
                FABRICANTE_MAQUINASRow rowFABRICANTE_MAQUINASRow = ((FABRICANTE_MAQUINASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FAB_RAZONSOCIAL};
                rowFABRICANTE_MAQUINASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFABRICANTE_MAQUINASRow);
                return rowFABRICANTE_MAQUINASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRow FindByFAB_CODIGO(decimal FAB_CODIGO) {
                return ((FABRICANTE_MAQUINASRow)(this.Rows.Find(new object[] {
                            FAB_CODIGO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FABRICANTE_MAQUINASDataTable cln = ((FABRICANTE_MAQUINASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FABRICANTE_MAQUINASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFAB_CODIGO = base.Columns["FAB_CODIGO"];
                this.columnFAB_RAZONSOCIAL = base.Columns["FAB_RAZONSOCIAL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFAB_CODIGO = new global::System.Data.DataColumn("FAB_CODIGO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAB_CODIGO);
                this.columnFAB_RAZONSOCIAL = new global::System.Data.DataColumn("FAB_RAZONSOCIAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAB_RAZONSOCIAL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFAB_CODIGO}, true));
                this.columnFAB_CODIGO.AutoIncrement = true;
                this.columnFAB_CODIGO.AutoIncrementSeed = -1;
                this.columnFAB_CODIGO.AutoIncrementStep = -1;
                this.columnFAB_CODIGO.AllowDBNull = false;
                this.columnFAB_CODIGO.ReadOnly = true;
                this.columnFAB_CODIGO.Unique = true;
                this.columnFAB_RAZONSOCIAL.MaxLength = 35;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRow NewFABRICANTE_MAQUINASRow() {
                return ((FABRICANTE_MAQUINASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FABRICANTE_MAQUINASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FABRICANTE_MAQUINASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FABRICANTE_MAQUINASRowChanged != null)) {
                    this.FABRICANTE_MAQUINASRowChanged(this, new FABRICANTE_MAQUINASRowChangeEvent(((FABRICANTE_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FABRICANTE_MAQUINASRowChanging != null)) {
                    this.FABRICANTE_MAQUINASRowChanging(this, new FABRICANTE_MAQUINASRowChangeEvent(((FABRICANTE_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FABRICANTE_MAQUINASRowDeleted != null)) {
                    this.FABRICANTE_MAQUINASRowDeleted(this, new FABRICANTE_MAQUINASRowChangeEvent(((FABRICANTE_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FABRICANTE_MAQUINASRowDeleting != null)) {
                    this.FABRICANTE_MAQUINASRowDeleting(this, new FABRICANTE_MAQUINASRowChangeEvent(((FABRICANTE_MAQUINASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFABRICANTE_MAQUINASRow(FABRICANTE_MAQUINASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMaquina ds = new dsMaquina();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FABRICANTE_MAQUINASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MAQUINASRow : global::System.Data.DataRow {
            
            private MAQUINASDataTable tableMAQUINAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MAQUINASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMAQUINAS = ((MAQUINASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MAQ_CODIGO {
                get {
                    return ((decimal)(this[this.tableMAQUINAS.MAQ_CODIGOColumn]));
                }
                set {
                    this[this.tableMAQUINAS.MAQ_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MODM_CODIGO {
                get {
                    return ((decimal)(this[this.tableMAQUINAS.MODM_CODIGOColumn]));
                }
                set {
                    this[this.tableMAQUINAS.MODM_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMAQ_CODIGO {
                get {
                    return ((decimal)(this[this.tableMAQUINAS.EMAQ_CODIGOColumn]));
                }
                set {
                    this[this.tableMAQUINAS.EMAQ_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FAB_CODIGO {
                get {
                    return ((decimal)(this[this.tableMAQUINAS.FAB_CODIGOColumn]));
                }
                set {
                    this[this.tableMAQUINAS.FAB_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAQ_NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableMAQUINAS.MAQ_NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAQ_NOMBRE\' in table \'MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAQUINAS.MAQ_NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAQ_NUMEROSERIE {
                get {
                    try {
                        return ((string)(this[this.tableMAQUINAS.MAQ_NUMEROSERIEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAQ_NUMEROSERIE\' in table \'MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAQUINAS.MAQ_NUMEROSERIEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MAQ_FECHAALTA {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMAQUINAS.MAQ_FECHAALTAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAQ_FECHAALTA\' in table \'MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAQUINAS.MAQ_FECHAALTAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAQ_MARCA {
                get {
                    try {
                        return ((string)(this[this.tableMAQUINAS.MAQ_MARCAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAQ_MARCA\' in table \'MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAQUINAS.MAQ_MARCAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAQ_ES_CRITICA {
                get {
                    try {
                        return ((string)(this[this.tableMAQUINAS.MAQ_ES_CRITICAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAQ_ES_CRITICA\' in table \'MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAQUINAS.MAQ_ES_CRITICAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRow ESTADO_MAQUINASRow {
                get {
                    return ((ESTADO_MAQUINASRow)(this.GetParentRow(this.Table.ParentRelations["maquina_estadoMaquina_fk"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["maquina_estadoMaquina_fk"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRow MODELOS_MAQUINASRow {
                get {
                    return ((MODELOS_MAQUINASRow)(this.GetParentRow(this.Table.ParentRelations["maquina_modeloMaquina_fk"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["maquina_modeloMaquina_fk"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRow FABRICANTE_MAQUINASRow {
                get {
                    return ((FABRICANTE_MAQUINASRow)(this.GetParentRow(this.Table.ParentRelations["maquina_fabricanteMaquina_fk"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["maquina_fabricanteMaquina_fk"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAQ_NOMBRENull() {
                return this.IsNull(this.tableMAQUINAS.MAQ_NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAQ_NOMBRENull() {
                this[this.tableMAQUINAS.MAQ_NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAQ_NUMEROSERIENull() {
                return this.IsNull(this.tableMAQUINAS.MAQ_NUMEROSERIEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAQ_NUMEROSERIENull() {
                this[this.tableMAQUINAS.MAQ_NUMEROSERIEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAQ_FECHAALTANull() {
                return this.IsNull(this.tableMAQUINAS.MAQ_FECHAALTAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAQ_FECHAALTANull() {
                this[this.tableMAQUINAS.MAQ_FECHAALTAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAQ_MARCANull() {
                return this.IsNull(this.tableMAQUINAS.MAQ_MARCAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAQ_MARCANull() {
                this[this.tableMAQUINAS.MAQ_MARCAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAQ_ES_CRITICANull() {
                return this.IsNull(this.tableMAQUINAS.MAQ_ES_CRITICAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAQ_ES_CRITICANull() {
                this[this.tableMAQUINAS.MAQ_ES_CRITICAColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ESTADO_MAQUINASRow : global::System.Data.DataRow {
            
            private ESTADO_MAQUINASDataTable tableESTADO_MAQUINAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ESTADO_MAQUINASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableESTADO_MAQUINAS = ((ESTADO_MAQUINASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMAQ_CODIGO {
                get {
                    return ((decimal)(this[this.tableESTADO_MAQUINAS.EMAQ_CODIGOColumn]));
                }
                set {
                    this[this.tableESTADO_MAQUINAS.EMAQ_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAQ_NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableESTADO_MAQUINAS.EMAQ_NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMAQ_NOMBRE\' in table \'ESTADO_MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableESTADO_MAQUINAS.EMAQ_NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAQ_DESCRIPCION {
                get {
                    try {
                        return ((string)(this[this.tableESTADO_MAQUINAS.EMAQ_DESCRIPCIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMAQ_DESCRIPCION\' in table \'ESTADO_MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableESTADO_MAQUINAS.EMAQ_DESCRIPCIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAQ_NOMBRENull() {
                return this.IsNull(this.tableESTADO_MAQUINAS.EMAQ_NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAQ_NOMBRENull() {
                this[this.tableESTADO_MAQUINAS.EMAQ_NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAQ_DESCRIPCIONNull() {
                return this.IsNull(this.tableESTADO_MAQUINAS.EMAQ_DESCRIPCIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAQ_DESCRIPCIONNull() {
                this[this.tableESTADO_MAQUINAS.EMAQ_DESCRIPCIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow[] GetMAQUINASRows() {
                if ((this.Table.ChildRelations["maquina_estadoMaquina_fk"] == null)) {
                    return new MAQUINASRow[0];
                }
                else {
                    return ((MAQUINASRow[])(base.GetChildRows(this.Table.ChildRelations["maquina_estadoMaquina_fk"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MODELOS_MAQUINASRow : global::System.Data.DataRow {
            
            private MODELOS_MAQUINASDataTable tableMODELOS_MAQUINAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MODELOS_MAQUINASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMODELOS_MAQUINAS = ((MODELOS_MAQUINASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MODM_CODIGO {
                get {
                    return ((decimal)(this[this.tableMODELOS_MAQUINAS.MODM_CODIGOColumn]));
                }
                set {
                    this[this.tableMODELOS_MAQUINAS.MODM_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODM_NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableMODELOS_MAQUINAS.MODM_NOMBREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODM_NOMBRE\' in table \'MODELOS_MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMODELOS_MAQUINAS.MODM_NOMBREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODM_DESCRIPCION {
                get {
                    try {
                        return ((string)(this[this.tableMODELOS_MAQUINAS.MODM_DESCRIPCIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODM_DESCRIPCION\' in table \'MODELOS_MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMODELOS_MAQUINAS.MODM_DESCRIPCIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODM_NOMBRENull() {
                return this.IsNull(this.tableMODELOS_MAQUINAS.MODM_NOMBREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODM_NOMBRENull() {
                this[this.tableMODELOS_MAQUINAS.MODM_NOMBREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODM_DESCRIPCIONNull() {
                return this.IsNull(this.tableMODELOS_MAQUINAS.MODM_DESCRIPCIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODM_DESCRIPCIONNull() {
                this[this.tableMODELOS_MAQUINAS.MODM_DESCRIPCIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow[] GetMAQUINASRows() {
                if ((this.Table.ChildRelations["maquina_modeloMaquina_fk"] == null)) {
                    return new MAQUINASRow[0];
                }
                else {
                    return ((MAQUINASRow[])(base.GetChildRows(this.Table.ChildRelations["maquina_modeloMaquina_fk"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FABRICANTE_MAQUINASRow : global::System.Data.DataRow {
            
            private FABRICANTE_MAQUINASDataTable tableFABRICANTE_MAQUINAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FABRICANTE_MAQUINASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFABRICANTE_MAQUINAS = ((FABRICANTE_MAQUINASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FAB_CODIGO {
                get {
                    return ((decimal)(this[this.tableFABRICANTE_MAQUINAS.FAB_CODIGOColumn]));
                }
                set {
                    this[this.tableFABRICANTE_MAQUINAS.FAB_CODIGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAB_RAZONSOCIAL {
                get {
                    try {
                        return ((string)(this[this.tableFABRICANTE_MAQUINAS.FAB_RAZONSOCIALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FAB_RAZONSOCIAL\' in table \'FABRICANTE_MAQUINAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFABRICANTE_MAQUINAS.FAB_RAZONSOCIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFAB_RAZONSOCIALNull() {
                return this.IsNull(this.tableFABRICANTE_MAQUINAS.FAB_RAZONSOCIALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFAB_RAZONSOCIALNull() {
                this[this.tableFABRICANTE_MAQUINAS.FAB_RAZONSOCIALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow[] GetMAQUINASRows() {
                if ((this.Table.ChildRelations["maquina_fabricanteMaquina_fk"] == null)) {
                    return new MAQUINASRow[0];
                }
                else {
                    return ((MAQUINASRow[])(base.GetChildRows(this.Table.ChildRelations["maquina_fabricanteMaquina_fk"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MAQUINASRowChangeEvent : global::System.EventArgs {
            
            private MAQUINASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRowChangeEvent(MAQUINASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAQUINASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ESTADO_MAQUINASRowChangeEvent : global::System.EventArgs {
            
            private ESTADO_MAQUINASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRowChangeEvent(ESTADO_MAQUINASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ESTADO_MAQUINASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MODELOS_MAQUINASRowChangeEvent : global::System.EventArgs {
            
            private MODELOS_MAQUINASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRowChangeEvent(MODELOS_MAQUINASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MODELOS_MAQUINASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FABRICANTE_MAQUINASRowChangeEvent : global::System.EventArgs {
            
            private FABRICANTE_MAQUINASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRowChangeEvent(FABRICANTE_MAQUINASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FABRICANTE_MAQUINASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GyCAP.Data.dsMaquinaTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MAQUINASTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MAQUINASTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MAQUINAS";
            tableMapping.ColumnMappings.Add("MAQ_CODIGO", "MAQ_CODIGO");
            tableMapping.ColumnMappings.Add("MODM_CODIGO", "MODM_CODIGO");
            tableMapping.ColumnMappings.Add("EMAQ_CODIGO", "EMAQ_CODIGO");
            tableMapping.ColumnMappings.Add("FAB_CODIGO", "FAB_CODIGO");
            tableMapping.ColumnMappings.Add("MAQ_NOMBRE", "MAQ_NOMBRE");
            tableMapping.ColumnMappings.Add("MAQ_NUMEROSERIE", "MAQ_NUMEROSERIE");
            tableMapping.ColumnMappings.Add("MAQ_FECHAALTA", "MAQ_FECHAALTA");
            tableMapping.ColumnMappings.Add("MAQ_MARCA", "MAQ_MARCA");
            tableMapping.ColumnMappings.Add("MAQ_ES_CRITICA", "MAQ_ES_CRITICA");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MAQUINAS] WHERE (([MAQ_CODIGO] = @Original_MAQ_CODIGO) AND ([MODM_CODIGO] = @Original_MODM_CODIGO) AND ([EMAQ_CODIGO] = @Original_EMAQ_CODIGO) AND ([FAB_CODIGO] = @Original_FAB_CODIGO) AND ((@IsNull_MAQ_NOMBRE = 1 AND [MAQ_NOMBRE] IS NULL) OR ([MAQ_NOMBRE] = @Original_MAQ_NOMBRE)) AND ((@IsNull_MAQ_NUMEROSERIE = 1 AND [MAQ_NUMEROSERIE] IS NULL) OR ([MAQ_NUMEROSERIE] = @Original_MAQ_NUMEROSERIE)) AND ((@IsNull_MAQ_FECHAALTA = 1 AND [MAQ_FECHAALTA] IS NULL) OR ([MAQ_FECHAALTA] = @Original_MAQ_FECHAALTA)) AND ((@IsNull_MAQ_MARCA = 1 AND [MAQ_MARCA] IS NULL) OR ([MAQ_MARCA] = @Original_MAQ_MARCA)) AND ((@IsNull_MAQ_ES_CRITICA = 1 AND [MAQ_ES_CRITICA] IS NULL) OR ([MAQ_ES_CRITICA] = @Original_MAQ_ES_CRITICA)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MAQ_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_NUMEROSERIE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NUMEROSERIE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_NUMEROSERIE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NUMEROSERIE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_FECHAALTA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_FECHAALTA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_FECHAALTA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_FECHAALTA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_MARCA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_MARCA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_MARCA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_MARCA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_ES_CRITICA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_ES_CRITICA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_ES_CRITICA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_ES_CRITICA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MAQUINAS] ([MODM_CODIGO], [EMAQ_CODIGO], [FAB_CODIGO], [MAQ_NOMBRE], [MAQ_NUMEROSERIE], [MAQ_FECHAALTA], [MAQ_MARCA], [MAQ_ES_CRITICA]) VALUES (@MODM_CODIGO, @EMAQ_CODIGO, @FAB_CODIGO, @MAQ_NOMBRE, @MAQ_NUMEROSERIE, @MAQ_FECHAALTA, @MAQ_MARCA, @MAQ_ES_CRITICA);
SELECT MAQ_CODIGO, MODM_CODIGO, EMAQ_CODIGO, FAB_CODIGO, MAQ_NOMBRE, MAQ_NUMEROSERIE, MAQ_FECHAALTA, MAQ_MARCA, MAQ_ES_CRITICA FROM MAQUINAS WHERE (MAQ_CODIGO = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_NUMEROSERIE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NUMEROSERIE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_FECHAALTA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_FECHAALTA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_MARCA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_MARCA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_ES_CRITICA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_ES_CRITICA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MAQUINAS] SET [MODM_CODIGO] = @MODM_CODIGO, [EMAQ_CODIGO] = @EMAQ_CODIGO, [FAB_CODIGO] = @FAB_CODIGO, [MAQ_NOMBRE] = @MAQ_NOMBRE, [MAQ_NUMEROSERIE] = @MAQ_NUMEROSERIE, [MAQ_FECHAALTA] = @MAQ_FECHAALTA, [MAQ_MARCA] = @MAQ_MARCA, [MAQ_ES_CRITICA] = @MAQ_ES_CRITICA WHERE (([MAQ_CODIGO] = @Original_MAQ_CODIGO) AND ([MODM_CODIGO] = @Original_MODM_CODIGO) AND ([EMAQ_CODIGO] = @Original_EMAQ_CODIGO) AND ([FAB_CODIGO] = @Original_FAB_CODIGO) AND ((@IsNull_MAQ_NOMBRE = 1 AND [MAQ_NOMBRE] IS NULL) OR ([MAQ_NOMBRE] = @Original_MAQ_NOMBRE)) AND ((@IsNull_MAQ_NUMEROSERIE = 1 AND [MAQ_NUMEROSERIE] IS NULL) OR ([MAQ_NUMEROSERIE] = @Original_MAQ_NUMEROSERIE)) AND ((@IsNull_MAQ_FECHAALTA = 1 AND [MAQ_FECHAALTA] IS NULL) OR ([MAQ_FECHAALTA] = @Original_MAQ_FECHAALTA)) AND ((@IsNull_MAQ_MARCA = 1 AND [MAQ_MARCA] IS NULL) OR ([MAQ_MARCA] = @Original_MAQ_MARCA)) AND ((@IsNull_MAQ_ES_CRITICA = 1 AND [MAQ_ES_CRITICA] IS NULL) OR ([MAQ_ES_CRITICA] = @Original_MAQ_ES_CRITICA)));
SELECT MAQ_CODIGO, MODM_CODIGO, EMAQ_CODIGO, FAB_CODIGO, MAQ_NOMBRE, MAQ_NUMEROSERIE, MAQ_FECHAALTA, MAQ_MARCA, MAQ_ES_CRITICA FROM MAQUINAS WHERE (MAQ_CODIGO = @MAQ_CODIGO)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_NUMEROSERIE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NUMEROSERIE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_FECHAALTA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_FECHAALTA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_MARCA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_MARCA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_ES_CRITICA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_ES_CRITICA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MAQ_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_NUMEROSERIE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NUMEROSERIE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_NUMEROSERIE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_NUMEROSERIE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_FECHAALTA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_FECHAALTA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_FECHAALTA", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_FECHAALTA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_MARCA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_MARCA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_MARCA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_MARCA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MAQ_ES_CRITICA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_ES_CRITICA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MAQ_ES_CRITICA", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAQ_ES_CRITICA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "MAQ_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GyCAP.Data.Properties.Settings.Default.ProyectoConnectionString6;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAQ_CODIGO, MODM_CODIGO, EMAQ_CODIGO, FAB_CODIGO, MAQ_NOMBRE, MAQ_NUMEROSE" +
                "RIE, MAQ_FECHAALTA, MAQ_MARCA, MAQ_ES_CRITICA FROM dbo.MAQUINAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsMaquina.MAQUINASDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsMaquina.MAQUINASDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsMaquina.MAQUINASDataTable dataTable = new dsMaquina.MAQUINASDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina.MAQUINASDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina dataSet) {
            return this.Adapter.Update(dataSet, "MAQUINAS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_MAQ_CODIGO, decimal Original_MODM_CODIGO, decimal Original_EMAQ_CODIGO, decimal Original_FAB_CODIGO, string Original_MAQ_NOMBRE, string Original_MAQ_NUMEROSERIE, global::System.Nullable<global::System.DateTime> Original_MAQ_FECHAALTA, string Original_MAQ_MARCA, string Original_MAQ_ES_CRITICA) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_MAQ_CODIGO));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_MODM_CODIGO));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_EMAQ_CODIGO));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_FAB_CODIGO));
            if ((Original_MAQ_NOMBRE == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_MAQ_NOMBRE));
            }
            if ((Original_MAQ_NUMEROSERIE == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_MAQ_NUMEROSERIE));
            }
            if ((Original_MAQ_FECHAALTA.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_MAQ_FECHAALTA.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_MAQ_MARCA == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_MAQ_MARCA));
            }
            if ((Original_MAQ_ES_CRITICA == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_MAQ_ES_CRITICA));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal MODM_CODIGO, decimal EMAQ_CODIGO, decimal FAB_CODIGO, string MAQ_NOMBRE, string MAQ_NUMEROSERIE, global::System.Nullable<global::System.DateTime> MAQ_FECHAALTA, string MAQ_MARCA, string MAQ_ES_CRITICA) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(MODM_CODIGO));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(EMAQ_CODIGO));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(FAB_CODIGO));
            if ((MAQ_NOMBRE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MAQ_NOMBRE));
            }
            if ((MAQ_NUMEROSERIE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(MAQ_NUMEROSERIE));
            }
            if ((MAQ_FECHAALTA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(MAQ_FECHAALTA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((MAQ_MARCA == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(MAQ_MARCA));
            }
            if ((MAQ_ES_CRITICA == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(MAQ_ES_CRITICA));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal MODM_CODIGO, 
                    decimal EMAQ_CODIGO, 
                    decimal FAB_CODIGO, 
                    string MAQ_NOMBRE, 
                    string MAQ_NUMEROSERIE, 
                    global::System.Nullable<global::System.DateTime> MAQ_FECHAALTA, 
                    string MAQ_MARCA, 
                    string MAQ_ES_CRITICA, 
                    decimal Original_MAQ_CODIGO, 
                    decimal Original_MODM_CODIGO, 
                    decimal Original_EMAQ_CODIGO, 
                    decimal Original_FAB_CODIGO, 
                    string Original_MAQ_NOMBRE, 
                    string Original_MAQ_NUMEROSERIE, 
                    global::System.Nullable<global::System.DateTime> Original_MAQ_FECHAALTA, 
                    string Original_MAQ_MARCA, 
                    string Original_MAQ_ES_CRITICA, 
                    decimal MAQ_CODIGO) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(MODM_CODIGO));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(EMAQ_CODIGO));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(FAB_CODIGO));
            if ((MAQ_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(MAQ_NOMBRE));
            }
            if ((MAQ_NUMEROSERIE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(MAQ_NUMEROSERIE));
            }
            if ((MAQ_FECHAALTA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(MAQ_FECHAALTA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((MAQ_MARCA == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(MAQ_MARCA));
            }
            if ((MAQ_ES_CRITICA == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(MAQ_ES_CRITICA));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_MAQ_CODIGO));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_MODM_CODIGO));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_EMAQ_CODIGO));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Original_FAB_CODIGO));
            if ((Original_MAQ_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_MAQ_NOMBRE));
            }
            if ((Original_MAQ_NUMEROSERIE == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_MAQ_NUMEROSERIE));
            }
            if ((Original_MAQ_FECHAALTA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_MAQ_FECHAALTA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_MAQ_MARCA == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_MAQ_MARCA));
            }
            if ((Original_MAQ_ES_CRITICA == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_MAQ_ES_CRITICA));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(MAQ_CODIGO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal MODM_CODIGO, 
                    decimal EMAQ_CODIGO, 
                    decimal FAB_CODIGO, 
                    string MAQ_NOMBRE, 
                    string MAQ_NUMEROSERIE, 
                    global::System.Nullable<global::System.DateTime> MAQ_FECHAALTA, 
                    string MAQ_MARCA, 
                    string MAQ_ES_CRITICA, 
                    decimal Original_MAQ_CODIGO, 
                    decimal Original_MODM_CODIGO, 
                    decimal Original_EMAQ_CODIGO, 
                    decimal Original_FAB_CODIGO, 
                    string Original_MAQ_NOMBRE, 
                    string Original_MAQ_NUMEROSERIE, 
                    global::System.Nullable<global::System.DateTime> Original_MAQ_FECHAALTA, 
                    string Original_MAQ_MARCA, 
                    string Original_MAQ_ES_CRITICA) {
            return this.Update(MODM_CODIGO, EMAQ_CODIGO, FAB_CODIGO, MAQ_NOMBRE, MAQ_NUMEROSERIE, MAQ_FECHAALTA, MAQ_MARCA, MAQ_ES_CRITICA, Original_MAQ_CODIGO, Original_MODM_CODIGO, Original_EMAQ_CODIGO, Original_FAB_CODIGO, Original_MAQ_NOMBRE, Original_MAQ_NUMEROSERIE, Original_MAQ_FECHAALTA, Original_MAQ_MARCA, Original_MAQ_ES_CRITICA, Original_MAQ_CODIGO);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ESTADO_MAQUINASTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ESTADO_MAQUINASTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ESTADO_MAQUINAS";
            tableMapping.ColumnMappings.Add("EMAQ_CODIGO", "EMAQ_CODIGO");
            tableMapping.ColumnMappings.Add("EMAQ_NOMBRE", "EMAQ_NOMBRE");
            tableMapping.ColumnMappings.Add("EMAQ_DESCRIPCION", "EMAQ_DESCRIPCION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ESTADO_MAQUINAS] WHERE (([EMAQ_CODIGO] = @Original_EMAQ_CODIGO) AND ((@IsNull_EMAQ_NOMBRE = 1 AND [EMAQ_NOMBRE] IS NULL) OR ([EMAQ_NOMBRE] = @Original_EMAQ_NOMBRE)) AND ((@IsNull_EMAQ_DESCRIPCION = 1 AND [EMAQ_DESCRIPCION] IS NULL) OR ([EMAQ_DESCRIPCION] = @Original_EMAQ_DESCRIPCION)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EMAQ_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EMAQ_DESCRIPCION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_DESCRIPCION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_DESCRIPCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ESTADO_MAQUINAS] ([EMAQ_NOMBRE], [EMAQ_DESCRIPCION]) VALUES (@" +
                "EMAQ_NOMBRE, @EMAQ_DESCRIPCION);\r\nSELECT EMAQ_CODIGO, EMAQ_NOMBRE, EMAQ_DESCRIPC" +
                "ION FROM ESTADO_MAQUINAS WHERE (EMAQ_CODIGO = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_DESCRIPCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ESTADO_MAQUINAS] SET [EMAQ_NOMBRE] = @EMAQ_NOMBRE, [EMAQ_DESCRIPCION] = @EMAQ_DESCRIPCION WHERE (([EMAQ_CODIGO] = @Original_EMAQ_CODIGO) AND ((@IsNull_EMAQ_NOMBRE = 1 AND [EMAQ_NOMBRE] IS NULL) OR ([EMAQ_NOMBRE] = @Original_EMAQ_NOMBRE)) AND ((@IsNull_EMAQ_DESCRIPCION = 1 AND [EMAQ_DESCRIPCION] IS NULL) OR ([EMAQ_DESCRIPCION] = @Original_EMAQ_DESCRIPCION)));
SELECT EMAQ_CODIGO, EMAQ_NOMBRE, EMAQ_DESCRIPCION FROM ESTADO_MAQUINAS WHERE (EMAQ_CODIGO = @EMAQ_CODIGO)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_DESCRIPCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EMAQ_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EMAQ_DESCRIPCION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_DESCRIPCION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EMAQ_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EMAQ_DESCRIPCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EMAQ_CODIGO", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "EMAQ_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GyCAP.Data.Properties.Settings.Default.ProyectoConnectionString6;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EMAQ_CODIGO, EMAQ_NOMBRE, EMAQ_DESCRIPCION FROM dbo.ESTADO_MAQUINAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsMaquina.ESTADO_MAQUINASDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsMaquina.ESTADO_MAQUINASDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsMaquina.ESTADO_MAQUINASDataTable dataTable = new dsMaquina.ESTADO_MAQUINASDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina.ESTADO_MAQUINASDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina dataSet) {
            return this.Adapter.Update(dataSet, "ESTADO_MAQUINAS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_EMAQ_CODIGO, string Original_EMAQ_NOMBRE, string Original_EMAQ_DESCRIPCION) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_EMAQ_CODIGO));
            if ((Original_EMAQ_NOMBRE == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_EMAQ_NOMBRE));
            }
            if ((Original_EMAQ_DESCRIPCION == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_EMAQ_DESCRIPCION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string EMAQ_NOMBRE, string EMAQ_DESCRIPCION) {
            if ((EMAQ_NOMBRE == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EMAQ_NOMBRE));
            }
            if ((EMAQ_DESCRIPCION == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(EMAQ_DESCRIPCION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EMAQ_NOMBRE, string EMAQ_DESCRIPCION, decimal Original_EMAQ_CODIGO, string Original_EMAQ_NOMBRE, string Original_EMAQ_DESCRIPCION, decimal EMAQ_CODIGO) {
            if ((EMAQ_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EMAQ_NOMBRE));
            }
            if ((EMAQ_DESCRIPCION == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(EMAQ_DESCRIPCION));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_EMAQ_CODIGO));
            if ((Original_EMAQ_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_EMAQ_NOMBRE));
            }
            if ((Original_EMAQ_DESCRIPCION == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_EMAQ_DESCRIPCION));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(EMAQ_CODIGO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EMAQ_NOMBRE, string EMAQ_DESCRIPCION, decimal Original_EMAQ_CODIGO, string Original_EMAQ_NOMBRE, string Original_EMAQ_DESCRIPCION) {
            return this.Update(EMAQ_NOMBRE, EMAQ_DESCRIPCION, Original_EMAQ_CODIGO, Original_EMAQ_NOMBRE, Original_EMAQ_DESCRIPCION, Original_EMAQ_CODIGO);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MODELOS_MAQUINASTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MODELOS_MAQUINASTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MODELOS_MAQUINAS";
            tableMapping.ColumnMappings.Add("MODM_CODIGO", "MODM_CODIGO");
            tableMapping.ColumnMappings.Add("MODM_NOMBRE", "MODM_NOMBRE");
            tableMapping.ColumnMappings.Add("MODM_DESCRIPCION", "MODM_DESCRIPCION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MODELOS_MAQUINAS] WHERE (([MODM_CODIGO] = @Original_MODM_CODIGO) AND ((@IsNull_MODM_NOMBRE = 1 AND [MODM_NOMBRE] IS NULL) OR ([MODM_NOMBRE] = @Original_MODM_NOMBRE)) AND ((@IsNull_MODM_DESCRIPCION = 1 AND [MODM_DESCRIPCION] IS NULL) OR ([MODM_DESCRIPCION] = @Original_MODM_DESCRIPCION)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODM_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODM_DESCRIPCION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_DESCRIPCION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_DESCRIPCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MODELOS_MAQUINAS] ([MODM_NOMBRE], [MODM_DESCRIPCION]) VALUES (" +
                "@MODM_NOMBRE, @MODM_DESCRIPCION);\r\nSELECT MODM_CODIGO, MODM_NOMBRE, MODM_DESCRIP" +
                "CION FROM MODELOS_MAQUINAS WHERE (MODM_CODIGO = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_DESCRIPCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MODELOS_MAQUINAS] SET [MODM_NOMBRE] = @MODM_NOMBRE, [MODM_DESCRIPCION] = @MODM_DESCRIPCION WHERE (([MODM_CODIGO] = @Original_MODM_CODIGO) AND ((@IsNull_MODM_NOMBRE = 1 AND [MODM_NOMBRE] IS NULL) OR ([MODM_NOMBRE] = @Original_MODM_NOMBRE)) AND ((@IsNull_MODM_DESCRIPCION = 1 AND [MODM_DESCRIPCION] IS NULL) OR ([MODM_DESCRIPCION] = @Original_MODM_DESCRIPCION)));
SELECT MODM_CODIGO, MODM_NOMBRE, MODM_DESCRIPCION FROM MODELOS_MAQUINAS WHERE (MODM_CODIGO = @MODM_CODIGO)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_NOMBRE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_DESCRIPCION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODM_NOMBRE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_NOMBRE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_NOMBRE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_NOMBRE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODM_DESCRIPCION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_DESCRIPCION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODM_DESCRIPCION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODM_DESCRIPCION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODM_CODIGO", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "MODM_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GyCAP.Data.Properties.Settings.Default.ProyectoConnectionString6;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MODM_CODIGO, MODM_NOMBRE, MODM_DESCRIPCION FROM dbo.MODELOS_MAQUINAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsMaquina.MODELOS_MAQUINASDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsMaquina.MODELOS_MAQUINASDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsMaquina.MODELOS_MAQUINASDataTable dataTable = new dsMaquina.MODELOS_MAQUINASDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina.MODELOS_MAQUINASDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina dataSet) {
            return this.Adapter.Update(dataSet, "MODELOS_MAQUINAS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_MODM_CODIGO, string Original_MODM_NOMBRE, string Original_MODM_DESCRIPCION) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_MODM_CODIGO));
            if ((Original_MODM_NOMBRE == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_MODM_NOMBRE));
            }
            if ((Original_MODM_DESCRIPCION == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_MODM_DESCRIPCION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MODM_NOMBRE, string MODM_DESCRIPCION) {
            if ((MODM_NOMBRE == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MODM_NOMBRE));
            }
            if ((MODM_DESCRIPCION == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MODM_DESCRIPCION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MODM_NOMBRE, string MODM_DESCRIPCION, decimal Original_MODM_CODIGO, string Original_MODM_NOMBRE, string Original_MODM_DESCRIPCION, decimal MODM_CODIGO) {
            if ((MODM_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MODM_NOMBRE));
            }
            if ((MODM_DESCRIPCION == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MODM_DESCRIPCION));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_MODM_CODIGO));
            if ((Original_MODM_NOMBRE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_MODM_NOMBRE));
            }
            if ((Original_MODM_DESCRIPCION == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_MODM_DESCRIPCION));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(MODM_CODIGO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MODM_NOMBRE, string MODM_DESCRIPCION, decimal Original_MODM_CODIGO, string Original_MODM_NOMBRE, string Original_MODM_DESCRIPCION) {
            return this.Update(MODM_NOMBRE, MODM_DESCRIPCION, Original_MODM_CODIGO, Original_MODM_NOMBRE, Original_MODM_DESCRIPCION, Original_MODM_CODIGO);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FABRICANTE_MAQUINASTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FABRICANTE_MAQUINASTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FABRICANTE_MAQUINAS";
            tableMapping.ColumnMappings.Add("FAB_CODIGO", "FAB_CODIGO");
            tableMapping.ColumnMappings.Add("FAB_RAZONSOCIAL", "FAB_RAZONSOCIAL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FABRICANTE_MAQUINAS] WHERE (([FAB_CODIGO] = @Original_FAB_CODI" +
                "GO) AND ((@IsNull_FAB_RAZONSOCIAL = 1 AND [FAB_RAZONSOCIAL] IS NULL) OR ([FAB_RA" +
                "ZONSOCIAL] = @Original_FAB_RAZONSOCIAL)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FAB_RAZONSOCIAL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FAB_RAZONSOCIAL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FAB_RAZONSOCIAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FAB_RAZONSOCIAL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FABRICANTE_MAQUINAS] ([FAB_RAZONSOCIAL]) VALUES (@FAB_RAZONSOC" +
                "IAL);\r\nSELECT FAB_CODIGO, FAB_RAZONSOCIAL FROM FABRICANTE_MAQUINAS WHERE (FAB_CO" +
                "DIGO = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FAB_RAZONSOCIAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FAB_RAZONSOCIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FABRICANTE_MAQUINAS] SET [FAB_RAZONSOCIAL] = @FAB_RAZONSOCIAL WHERE (([FAB_CODIGO] = @Original_FAB_CODIGO) AND ((@IsNull_FAB_RAZONSOCIAL = 1 AND [FAB_RAZONSOCIAL] IS NULL) OR ([FAB_RAZONSOCIAL] = @Original_FAB_RAZONSOCIAL)));
SELECT FAB_CODIGO, FAB_RAZONSOCIAL FROM FABRICANTE_MAQUINAS WHERE (FAB_CODIGO = @FAB_CODIGO)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FAB_RAZONSOCIAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FAB_RAZONSOCIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FAB_RAZONSOCIAL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FAB_RAZONSOCIAL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FAB_RAZONSOCIAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FAB_RAZONSOCIAL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FAB_CODIGO", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "FAB_CODIGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GyCAP.Data.Properties.Settings.Default.ProyectoConnectionString6;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FAB_CODIGO, FAB_RAZONSOCIAL FROM dbo.FABRICANTE_MAQUINAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsMaquina.FABRICANTE_MAQUINASDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsMaquina.FABRICANTE_MAQUINASDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsMaquina.FABRICANTE_MAQUINASDataTable dataTable = new dsMaquina.FABRICANTE_MAQUINASDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina.FABRICANTE_MAQUINASDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsMaquina dataSet) {
            return this.Adapter.Update(dataSet, "FABRICANTE_MAQUINAS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_FAB_CODIGO, string Original_FAB_RAZONSOCIAL) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_FAB_CODIGO));
            if ((Original_FAB_RAZONSOCIAL == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_FAB_RAZONSOCIAL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string FAB_RAZONSOCIAL) {
            if ((FAB_RAZONSOCIAL == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FAB_RAZONSOCIAL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string FAB_RAZONSOCIAL, decimal Original_FAB_CODIGO, string Original_FAB_RAZONSOCIAL, decimal FAB_CODIGO) {
            if ((FAB_RAZONSOCIAL == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(FAB_RAZONSOCIAL));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Original_FAB_CODIGO));
            if ((Original_FAB_RAZONSOCIAL == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_FAB_RAZONSOCIAL));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(FAB_CODIGO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string FAB_RAZONSOCIAL, decimal Original_FAB_CODIGO, string Original_FAB_RAZONSOCIAL) {
            return this.Update(FAB_RAZONSOCIAL, Original_FAB_CODIGO, Original_FAB_RAZONSOCIAL, Original_FAB_CODIGO);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private MAQUINASTableAdapter _mAQUINASTableAdapter;
        
        private ESTADO_MAQUINASTableAdapter _eSTADO_MAQUINASTableAdapter;
        
        private MODELOS_MAQUINASTableAdapter _mODELOS_MAQUINASTableAdapter;
        
        private FABRICANTE_MAQUINASTableAdapter _fABRICANTE_MAQUINASTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MAQUINASTableAdapter MAQUINASTableAdapter {
            get {
                return this._mAQUINASTableAdapter;
            }
            set {
                this._mAQUINASTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ESTADO_MAQUINASTableAdapter ESTADO_MAQUINASTableAdapter {
            get {
                return this._eSTADO_MAQUINASTableAdapter;
            }
            set {
                this._eSTADO_MAQUINASTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MODELOS_MAQUINASTableAdapter MODELOS_MAQUINASTableAdapter {
            get {
                return this._mODELOS_MAQUINASTableAdapter;
            }
            set {
                this._mODELOS_MAQUINASTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FABRICANTE_MAQUINASTableAdapter FABRICANTE_MAQUINASTableAdapter {
            get {
                return this._fABRICANTE_MAQUINASTableAdapter;
            }
            set {
                this._fABRICANTE_MAQUINASTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._mAQUINASTableAdapter != null) 
                            && (this._mAQUINASTableAdapter.Connection != null))) {
                    return this._mAQUINASTableAdapter.Connection;
                }
                if (((this._eSTADO_MAQUINASTableAdapter != null) 
                            && (this._eSTADO_MAQUINASTableAdapter.Connection != null))) {
                    return this._eSTADO_MAQUINASTableAdapter.Connection;
                }
                if (((this._mODELOS_MAQUINASTableAdapter != null) 
                            && (this._mODELOS_MAQUINASTableAdapter.Connection != null))) {
                    return this._mODELOS_MAQUINASTableAdapter.Connection;
                }
                if (((this._fABRICANTE_MAQUINASTableAdapter != null) 
                            && (this._fABRICANTE_MAQUINASTableAdapter.Connection != null))) {
                    return this._fABRICANTE_MAQUINASTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._mAQUINASTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._eSTADO_MAQUINASTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mODELOS_MAQUINASTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fABRICANTE_MAQUINASTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(dsMaquina dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._mODELOS_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MODELOS_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mODELOS_MAQUINASTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fABRICANTE_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FABRICANTE_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fABRICANTE_MAQUINASTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._eSTADO_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ESTADO_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eSTADO_MAQUINASTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mAQUINASTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(dsMaquina dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._mODELOS_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MODELOS_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mODELOS_MAQUINASTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fABRICANTE_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FABRICANTE_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fABRICANTE_MAQUINASTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._eSTADO_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ESTADO_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eSTADO_MAQUINASTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mAQUINASTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(dsMaquina dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._mAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mAQUINASTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._eSTADO_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ESTADO_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eSTADO_MAQUINASTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fABRICANTE_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FABRICANTE_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fABRICANTE_MAQUINASTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mODELOS_MAQUINASTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MODELOS_MAQUINAS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mODELOS_MAQUINASTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(dsMaquina dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._mAQUINASTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mAQUINASTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._eSTADO_MAQUINASTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eSTADO_MAQUINASTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mODELOS_MAQUINASTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mODELOS_MAQUINASTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fABRICANTE_MAQUINASTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fABRICANTE_MAQUINASTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._mAQUINASTableAdapter != null)) {
                    revertConnections.Add(this._mAQUINASTableAdapter, this._mAQUINASTableAdapter.Connection);
                    this._mAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mAQUINASTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mAQUINASTableAdapter.Adapter);
                    }
                }
                if ((this._eSTADO_MAQUINASTableAdapter != null)) {
                    revertConnections.Add(this._eSTADO_MAQUINASTableAdapter, this._eSTADO_MAQUINASTableAdapter.Connection);
                    this._eSTADO_MAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._eSTADO_MAQUINASTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._eSTADO_MAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eSTADO_MAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eSTADO_MAQUINASTableAdapter.Adapter);
                    }
                }
                if ((this._mODELOS_MAQUINASTableAdapter != null)) {
                    revertConnections.Add(this._mODELOS_MAQUINASTableAdapter, this._mODELOS_MAQUINASTableAdapter.Connection);
                    this._mODELOS_MAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mODELOS_MAQUINASTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mODELOS_MAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mODELOS_MAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mODELOS_MAQUINASTableAdapter.Adapter);
                    }
                }
                if ((this._fABRICANTE_MAQUINASTableAdapter != null)) {
                    revertConnections.Add(this._fABRICANTE_MAQUINASTableAdapter, this._fABRICANTE_MAQUINASTableAdapter.Connection);
                    this._fABRICANTE_MAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fABRICANTE_MAQUINASTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fABRICANTE_MAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fABRICANTE_MAQUINASTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fABRICANTE_MAQUINASTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._mAQUINASTableAdapter != null)) {
                    this._mAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mAQUINASTableAdapter]));
                    this._mAQUINASTableAdapter.Transaction = null;
                }
                if ((this._eSTADO_MAQUINASTableAdapter != null)) {
                    this._eSTADO_MAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._eSTADO_MAQUINASTableAdapter]));
                    this._eSTADO_MAQUINASTableAdapter.Transaction = null;
                }
                if ((this._mODELOS_MAQUINASTableAdapter != null)) {
                    this._mODELOS_MAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mODELOS_MAQUINASTableAdapter]));
                    this._mODELOS_MAQUINASTableAdapter.Transaction = null;
                }
                if ((this._fABRICANTE_MAQUINASTableAdapter != null)) {
                    this._fABRICANTE_MAQUINASTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fABRICANTE_MAQUINASTableAdapter]));
                    this._fABRICANTE_MAQUINASTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591